<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/6/2024 9:12:26 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-FV64JGH"
  DTS:CreatorName="DESKTOP-FV64JGH\nikos"
  DTS:DTSID="{F49C9628-A0E4-4D0A-A8DA-71B55816504A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5314.0"
  DTS:LocaleID="2057"
  DTS:ObjectName="Update"
  DTS:PackageType="5"
  DTS:VersionBuild="9"
  DTS:VersionGUID="{02689F86-1656-4167-AF35-D8CAECB01210}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Update Data"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{AA8CDBA7-9AB3-4359-AD6D-993B80E16F85}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Data"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E6FF6A1A-AE3E-4FA4-83E1-ECD94A6BDE65}"
          SQLTask:SqlStatementSource="USE ChinookDW&#xA;GO&#xA;&#xA;---- Drop Constraints&#xA;ALTER TABLE FactInvoiceLine drop  constraint [FactInvoiceLineCustomer]&#xA;GO&#xA;--========================================================================--&#xA;&#xA;&#xA;USE ChinookStaging&#xA;GO&#xA;&#xA;&#xA;--------------------------------------------------------------- Loading Customer of ChinookStaging --------------------------------------------------------------&#xA;/* First we truncate ( delete data from ) the table Customer from chinookstaging and then we load it with the new data from the OLTP Chinook */&#xA;TRUNCATE TABLE [ChinookStaging].[dbo].[Customer];&#xA;&#xA;INSERT INTO Customer(CustomerID,  FirstName,  LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId,&#xA;&#x9;&#x9;&#x9;EmployeeFullName, Title, ReportsTo)&#xA;SELECT &#xA;&#x9;CustomerID,&#xA;&#x9;c.FirstName,&#xA;&#x9;c.LastName, &#xA;&#x9;Company, &#xA;&#x9;c.Address,&#xA;&#x9;c.City, &#xA;&#x9;c.State, &#xA;&#x9;c.Country,&#xA;&#x9;c.PostalCode, &#xA;&#x9;c.Phone, &#xA;&#x9;c.Fax,&#xA;&#x9;c.Email, &#xA;&#x9;SupportRepId,&#xA;&#x9;(e.LastName + ' ' + e.FirstName),&#xA;&#x9;e.Title, &#xA;&#x9;e.ReportsTo&#xA;FROM  Chinook.[dbo].Customer AS c&#xA;INNER JOIN Chinook.dbo.Employee AS e&#xA;&#x9;ON e.EmployeeId = c.SupportRepId&#xA; &#xA;-----------------------------------------------------------&#xA;&#xA;TRUNCATE TABLE [ChinookStaging].[dbo].InvoiceLine;&#xA;&#xA;INSERT INTO InvoiceLine&#xA;(InvoiceLineId,  InvoiceId,  TrackId,  UnitPrice,  Quantity,  CustomerId, InvoiceDate,  BillingAddress,&#xA;BillingCity, BillingState, BillingCountry, BillingPostalCode, Total)&#xA;SELECT&#xA;&#x9;InvoiceLineId,&#xA;&#x9;i.InvoiceId,  &#xA;&#x9;TrackId,&#xA;&#x9;UnitPrice,&#xA;&#x9;Quantity,&#xA;&#x9;i.CustomerId,&#xA;&#x9;i.InvoiceDate,&#xA;&#x9;i.BillingAddress,&#xA;&#x9;i.BillingCity,&#xA;&#x9;i.BillingState,&#xA;&#x9;i.BillingCountry,&#xA;&#x9;i.BillingPostalCode,&#xA;&#x9;Total&#xA;FROM [Chinook].[dbo].InvoiceLine il&#xA;&#x9;INNER JOIN Chinook.[dbo].Invoice  i &#xA;&#x9;&#x9;ON il.InvoiceId= i.InvoiceId&#xA;WHERE InvoiceDate &gt;= '2013-12-23';&#xA;--------------------------------------------------------&#xA;&#xA;&#xA;--------------------------------------------------------------- StagingDimCustomer Creation --------------------------------------------------------------&#xA; &#xA;DROP TABLE IF EXISTS ChinookStaging.[dbo].Staging_DimCustomer;&#xA;&#xA;CREATE TABLE ChinookStaging.[dbo].Staging_DimCustomer (&#xA;&#x9;CustomerKey INT IDENTITY(1,1) NOT NULL,&#xA;&#x9;CustomerID INT NOT NULL,&#xA;&#x9;FirstName NVARCHAR(40) NOT NULL, &#xA;&#x9;LastName NVARCHAR(20) NOT NULL,&#xA;&#x9;Company VARCHAR(80) NULL,&#xA;&#x9;Address NVARCHAR(70) NULL,&#xA;&#x9;City NVARCHAR(40) NULL,&#xA;&#x9;State NVARCHAR(40) NULL,&#xA;&#x9;Country NVARCHAR(40) NULL,&#xA;&#x9;PostalCode NVARCHAR(40) NULL,&#xA;&#x9;Phone NVARCHAR(24) NULL,&#xA;&#x9;Fax NVARCHAR(24) NULL,&#xA;&#x9;Email NVARCHAR(60) NOT NULL,&#xA;&#x9;SupportRepId INT NULL,&#xA;&#x9;EmployeeFullName NVARCHAR(41) NOT NULL,&#xA;&#x9;EmployeeTitle NVARCHAR(30) NULL,&#xA;&#x9;ReportsTo INT NULL,&#xA;&#x9;RowIsCurrent INT DEFAULT 1 NOT NULL,&#xA;&#x9;RowStartDate DATE DEFAULT '1899-12-31' NOT NULL,&#xA;&#x9;RowEndDate DATE DEFAULT '9999-12-31' NOT NULL,&#xA;&#x9;RowChangeReason VARCHAR(200) NULL&#xA;);&#xA;&#xA;--------------------------------------------------------------- Load data in StagingDimCustomer -------------------------------------------------------------------&#xA;/* We create this table so we can use it and compare the new data with the previous data stored in the respective table from DW. We can see if the data are updated,&#xA;or if we have new data and so then we can do the edits */&#xA;&#xA;INSERT INTO ChinookStaging.[dbo].Staging_DimCustomer(&#xA;&#x9;CustomerID, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId, EmployeeFullName, EmployeeTitle, ReportsTo)&#xA;SELECT [CustomerID]customer_id,&#xA;&#x9;   FirstName,&#xA;&#x9;   LastName,&#xA;&#x9;   Company,&#xA;&#x9;   Address, &#xA;&#x9;   City, &#xA;&#x9;   State,&#xA;&#x9;   Country,&#xA;&#x9;   PostalCode,&#xA;&#x9;   Phone,&#xA;&#x9;   Fax,&#xA;&#x9;   Email, &#xA;&#x9;   SupportRepId,&#xA;&#x9;   EmployeeFullName,&#xA;&#x9;   Title, &#xA;&#x9;   ReportsTo&#xA;FROM ChinookStaging.[dbo].[Customer] ;&#xA;&#xA; --------------------------------------------------------------- Load data in DimCustomer of DW -------------------------------------------------------------------&#xA; /* Time to do the hardwork. Here is the stage where we are going to load the data in the Data Warehouse (DW). By loading, we mean that we are going to add new data,&#xA; or update the old ones by keeping at the same time their history. This is the implementation of delta Loading.*/&#xA;&#xA;declare @etldate date = '2013-12-23'; -- The date after last&#xA;&#xA;INSERT INTO ChinookDW.[dbo].DimCustomer (CustomerID, LastName, FirstName, Company, CustomerAddress, City, CustomerState, CustomerCountry, CustomerPostalCode, &#xA;CustomerPhone, CustomerFax, CustomerEmail, SupportedByEmployee, EmployeeFullName, EmployeeTitle, ReportsTo, RowStartDate, RowChangeReason )&#xA;SELECT &#xA;&#x9;CustomerID, LastName, FirstName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId, &#xA;&#x9;EmployeeFullName, EmployeeTitle, ReportsTo, @etldate, ActionName&#xA;FROM&#xA;(&#xA;&#x9;MERGE ChinookDW.[dbo].DimCustomer AS target&#xA;&#x9;&#x9;USING ChinookStaging.[dbo].Staging_DimCustomer as source&#xA;&#x9;&#x9;ON target.[CustomerID] = source.[CustomerID]&#xA;&#x9; WHEN MATCHED &#x9; AND &#xA;&#x9; (source.City &lt;&gt; target.City  &#xA;&#x9; OR source.Company &lt;&gt; target.Company&#xA;&#x9; OR source.State &lt;&gt; target.CustomerState&#xA;&#x9; OR source.Country &lt;&gt; target.CustomerCountry&#xA;&#x9; OR source.PostalCode &lt;&gt; target.CustomerPostalCode&#xA;&#x9; OR source.Phone &lt;&gt; target.CustomerPhone&#xA;&#x9; OR source.Fax &lt;&gt; target.CustomerFax&#xA;&#x9; OR source.Email &lt;&gt; target.CustomerEmail&#xA;&#x9; OR source.Address &lt;&gt; target.CustomerAddress&#xA;&#x9; OR source.Company &lt;&gt; target.Company)&#xA;&#x9; AND target.[RowIsCurrent] = 1 &#xA;&#x9; THEN UPDATE SET&#xA;&#x9;&#x9; target.RowIsCurrent = 0,&#xA;&#x9;&#x9; target.RowEndDate = dateadd(day, -1, @etldate),&#xA;&#x9;&#x9; target.RowChangeReason = 'UPDATED NOT CURRENT'&#xA;&#x9; WHEN NOT MATCHED THEN&#xA;&#x9;   INSERT  (&#xA;&#x9;&#x9;&#x9;CustomerID, LastName, FirstName, Company, CustomerAddress, City, CustomerState, CustomerCountry, CustomerPostalCode, &#xA;&#x9;CustomerPhone, CustomerFax, CustomerEmail, SupportedByEmployee, EmployeeFullName, EmployeeTitle, ReportsTo, RowStartDate,   RowChangeReason&#xA;&#x9;   )&#xA;&#x9;   VALUES( &#xA;&#x9;&#x9;   source.CustomerID, source.LastName ,source.FirstName,&#xA;&#x9;&#x9;&#x9;source.Company, source.Address, source.City, source.State, source.Country, source.PostalCode, &#xA;&#x9;source.Phone, source.Fax, source.Email, source.SupportRepId,&#xA;&#x9; source.EmployeeFullName, source.EmployeeTitle, source.ReportsTo,CAST(GetDate() AS Date), 'NEW RECORD'&#xA;&#x9;   )&#xA;&#x9;WHEN NOT MATCHED BY Source THEN&#xA;&#x9;&#x9;UPDATE SET &#xA;&#x9;&#x9;&#x9;Target.RowEndDate= dateadd(day, -1, CAST(GetDate() AS Date))&#xA;&#x9;&#x9;&#x9;,target.RowIsCurrent = 0&#xA;&#x9;&#x9;&#x9;,Target.RowChangeReason  = 'SOFT DELETE'&#xA;&#x9;OUTPUT &#xA;&#x9;&#x9; source.CustomerID, source.LastName ,source.FirstName, source.Company, source.Address, source.City, source.State, &#xA;&#x9;&#x9; source.Country, source.PostalCode, source.Phone, source.Fax, source.Email, source.SupportRepId , source.EmployeeFullName, &#xA;&#x9;&#x9; source.EmployeeTitle, source.ReportsTo, $Action AS ActionName   &#xA;) Mrg&#xA;WHERE Mrg.ActionName = 'UPDATE'&#xA;AND [CustomerID] IS NOT NULL;&#xA;&#xA;&#xA;&#xA;------------------------------------------------&#xA;-- insert new facts ...&#xA;&#xA;INSERT INTO [ChinookDW].[dbo].FactInvoiceLine(&#xA;    Date_Key, Track_Key, Employee_Key, Customer_Key,&#xA;    InvoiceLine_Id, Invoice_Id, TrackId, Quantity, UnitPrice, c.CustomerId, InvoiceDate,&#xA;&#x9;BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total)&#xA;SELECT d.DateKey, &#xA;&#x9;   t.Track_Key, &#xA;&#x9;   e.Employee_key,&#xA;&#x9;   c.Customer_Key,&#xA;&#x9;   il.InvoiceLineId, il.InvoiceId, il.TrackId, il.Quantity, il.UnitPrice, il.CustomerId,&#xA;&#x9;   il.InvoiceDate, il.BillingAddress, il.BillingCity, il.BillingState, il.BillingCountry, il.BillingPostalCode, il.Total&#xA;FROM &#xA;    ChinookStaging.dbo.InvoiceLine AS il&#xA;INNER JOIN ChinookDW.dbo.DimCustomer AS c&#xA;    ON c.CustomerID=il.CustomerId and c.RowIsCurrent=1&#xA;INNER JOIN ChinookDW.dbo.DimEmployee AS e&#xA;    ON e.EmployeeID = c.SupportedByEmployee and c.RowIsCurrent=1&#xA;INNER JOIN ChinookDW.dbo.DimTrack t&#xA;&#x9;ON t.TrackId = il.TrackId and c.RowIsCurrent=1&#xA;INNER JOIN ChinookDW.dbo.DimDate d&#xA;&#x9;ON d.Date = il.InvoiceDate and c.RowIsCurrent=1&#xA;&#xA;GO&#xA;&#xA;--===============================================================================================--&#xA;/* Again here we use Chinook DW so we can recover the constraint between the fact table Invoice&#xA;Line and the Dimension Customer. */&#xA;&#xA;USE ChinookDW&#xA;GO&#xA;&#xA;-- Recover Constraints&#xA;ALTER TABLE FactInvoiceLine ADD constraint [FactInvoiceLineCustomer] FOREIGN KEY (Customer_Key)&#xA;    REFERENCES DimCustomer (Customer_Key)&#xA;GO&#xA;&#xA;--===============================================================================================--&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="138,42"
          Id="Package\Update Data"
          TopLeft="260.000000553472,151.411764573164" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>